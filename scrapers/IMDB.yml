name: IMDB
performerByName:
  action: scrapeXPath
  queryURL: https://www.imdb.com/search/name/?name={}
  scraper: performerSearch
performerByURL:
  - action: scrapeXPath
    url:
      - imdb.com
    scraper: performerScraper
sceneByURL:
  - action: scrapeXPath
    url:
      - imdb.com/title/
    scraper: sceneScraper
groupByURL:
  - action: scrapeXPath
    url:
      - imdb.com/title/
    scraper: movieScraper
xPathScrapers:
  performerSearch:
    common:
      $listAnchor: //a[./h3]
    performer:
      Name:
        selector: $listAnchor
        postProcess:
          - replace:
              # Remove result index, like '1. Performer Performerson' and '2. Lady Performerson'
              - regex: ^\d+\.\s+
                with: ""
      URLs:
        selector: $listAnchor/@href
        postProcess:
          - replace:
              - regex: ^
                with: https://www.imdb.com
              # Strip query parameters used for tracking
              - regex: \?.+$
                with: ""
  performerScraper:
    performer:
      Name: //*[@data-testid="hero__primary-text"]
      Birthdate:
        selector: (//li[@data-testid="nm_pd_bl"]//li)[1]
        postProcess:
          - parseDate: January 2, 2006
      Image: &imageAttr
        selector: //meta[@property="og:image"]/@content
        postProcess:
          - replace:
              - regex: '.*/imdb[^/]*\.png'
                with:
      URLs: //li[@data-testid="details-officialsites"]//a[@target="_blank"]/@href
      #     Facebook:  //div[@id='details-official-sites']/a[contains(text(),'Facebook')]/@href
      Aliases:
        selector: //li[@data-testid="nm_pd_ans"]//li | //span[contains(text(), "Nicknames")]/following-sibling::*//li/span
        concat: "|"
        postProcess:
          - replace:
              - regex: '\|+'
                with: ", "
          - javascript: |
              return [...new Set(
                value.split(',')
                  .map(s => s.trim())
                  .filter(s => s)
              )]
              .sort((a, b) => a.localeCompare(b))
              .join(', ');
      Height:
        selector: //li[@data-testid="nm_pd_he"]//li
        postProcess:
          - replace:
              - regex: \D
                with: ""

  sceneScraper:
    scene:
      Title: &title //section//h1
      URL: &url //meta[@property="og:url"]/@content
      Groups:
        Name: *title
        URL: *url
      Date: &date
        selector: //li[@data-testid='title-details-releasedate']/div/ul/li/a/text()
        postProcess:
          - replace:
              - regex: '\s*\(.+$'
                with: ""
              - regex: '^(\d\d\d\d)$'
                with: $1-01-01
          - parseDate: January 2, 2006
      Details: &desc //span[@data-testid="plot-xl"]
      Tags:
        Name: //div[@data-testid="genres"]/a/span
      Performers:
        Name: //a[@data-testid="title-cast-item__actor"]
      Image: *imageAttr
      Studio: &studio
        Name: (//li[@data-testid="title-details-companies"]/div//a)[1]
  movieScraper:
    group:
      Name: *title
      URL: *url
      Date: *date
      Director: //section[@data-testid="title-cast"]//li[span[text()="Director"]]//a
      Duration:
        selector: //ul[@data-testid="hero-title-block__metadata"]/li[last()]
        postProcess:
          - replace:
              - regex: (\d+)h\s*
                with: "$1:"
              - regex: (\d+)m
                with: "$1:00"
              - regex: ":$" # only h
                with: ":00:00"
              - regex: ^(\d+:\d+)$ # only m
                with: "00:$1"
      Studio: *studio
      Synopsis: *desc
      FrontImage: *imageAttr
driver:
  headers:
    - Key: User-Agent
      Value: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:140.0) Gecko/20100101 Firefox/140.0
# Last Updated September 17, 2025
