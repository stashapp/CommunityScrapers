name: VirtualRealPorn

sceneByURL:
  - action: scrapeXPath
    url: &urlSel
      - virtualrealamateurporn.com/vr-amateur-porn-video/
      - virtualrealjapan.com/vr-japanese-video/
      - virtualrealpassion.com/vr-female-pov-porn-video/
      - virtualrealporn.com/vr-porn-video/
      - virtualrealgay.com/vr-gay-porn-video/
      - virtualrealtrans.com/vr-trans-porn-video
    scraper: sceneScraper

sceneByFragment:
  action: scrapeXPath
  # url format: https://virtualrealporn.com/vr-porn-video/{title}
  # title is part of the official filename for more recent scenes
  # however, title will have spaces replaced with '_' in the file name
  queryURL: https://virtualrealporn.com/vr-porn-video/{filename}/
  queryURLReplace:
    # filename format:
    #   - older scenes
    #       VirtualRealPorn.com_-_{title}_-_{misc}.{ext}
    #         misc: could be vrtype, instructios for their player etc. Not relevant.
    #   - new scenes:
    #       VirtualRealPorn_{title}_{res}_{vrtype}.{ext}
    #         res: oculus|\d+k
    #         vrtype: stuff we do not care about but could contain '_'
    filename:
      - regex: (?i)^(?:VirtualRealPorn_(?P<title>.+)_(?:oculus|\dk)_.+)|(?:VirtualRealPorn.com_-_(?P<title>.+?)_-_.+)$
        with: $title
      # title has spaces replaced with '_' in the filename
      # but we need '-' for the url
      - regex: _
        with: "-"
  scraper: sceneScraper

movieByURL:
  - action: scrapeXPath
    url: *urlSel
    scraper: movieScraper

performerByURL:
  - action: scrapeXPath
    url:
      - virtualrealgay.com/vr-models/
      - virtualrealpassion.com/vr-models/
      - virtualrealporn.com/vr-models/
      - virtualrealtrans.com/vr-models/
    scraper: performerScraper

xPathScrapers:
  sceneScraper:
    scene:
      Title: &titleDef
        selector: //div[@class="header_video"]//h1
        postProcess:
          - replace:
              - regex: VR [\s\w]+? video$
                with: ""
      Date: &dateAttr
        selector: //script[@type="application/ld+json" and @class="yoast-schema-graph"]/text()
        postProcess:
          - javascript: |
              if (value && value.length && value.startsWith('{')) {
                // parse JSON
                return JSON.parse(value)["@graph"]
                  .find(item => item["@type"] === "WebPage")
                  .datePublished
                  // return YYYY-MM-DD format from full ISO datetime, e.g. 2024-01-01T12:00:00Z
                  .substring(0, 10)
              }
              // return as-is if not JSON
              return value
      Details: &detailsSel
        selector: //div[@class="description_container"]/p
        concat: "\n\n"
      Tags:
        Name:
          selector: >-
            //div[@class="metaHolder"]//a/span/text()
            |
            //link[@rel="canonical"]/@href
          postProcess:
            - replace:
                # the second selector xpath returns a URL, this is a "hack" to get a
                # fixed tag by converting it to "Virtual Reality"
                - regex: ^http.*$
                  with: Virtual Reality
      Performers:
        Name: //div[@class="performers_section"]//div[@class="model-box"]/a/img/@alt
      Studio:
        Name: &studioName
          selector: //meta[@property="og:site_name"]/@content
          postProcess:
            - replace:
                - regex: \.com
                  with: ""
            - map:
                VirtualRealAmateurPorn: "VirtualRealAmateur"
      Image: &imageSel //meta[@property="og:image"]/@content
      URL: //link[@rel="alternate" and @hreflang="x-default"]/@href
      Code: 
        selector: //link[@rel="shortlink"]/@href
        postProcess:
          - replace:
            - regex: ^https://.*/\?p=
              with:
      # Movies:
      #   Name:
      #     selector: //meta[@property="og:site_name"]/@content|//h1[@class="titleVideo"]
      #     concat: " - "
      #   Date: *dateAttr
      #   Synopsis: *detailsSel
      #   URL: //meta[@property="og:url"]/@content
  movieScraper:
    movie:
      Name:
        selector: //meta[@property="og:site_name"]/@content|//h1[@class="titleVideo"]
        concat: " - "
      Date: *dateAttr
      Studio:
        Name: *studioName
      Synopsis: *detailsSel
      FrontImage: *imageSel
  performerScraper:
    performer:
      Name:
        selector: //div[@class="head_model"]//h1/text()
        postProcess:
          - replace:
              - regex: \s+$
                with: ""
      Gender:
        selector: //section[@id="about"]//tr/th[text()="Gender"]//following-sibling::td/text()
        postProcess:
          - map:
              Female Trans: transgender_female
      Twitter:
        selector: //div[@id="social"]//a[contains(@class, "twitter")]/@href
        postProcess:
          - replace:
              - regex: twitter.com
                with: x.com
      Instagram: //div[@id="social"]//a[contains(@class, "instagram")]/@href
      Birthdate:
        selector: //section[@id="about"]//tr/th[text()="Date of birth"]//following-sibling::td/text()
        postProcess:
          - parseDate: 02/01/2006
      Country: //section[@id="about"]//tr/th[text()="Country"]//following-sibling::td/text()
      HairColor: //section[@id="about"]//tr/th[text()="Hair color"]//following-sibling::td/text()
      EyeColor: //section[@id="about"]//tr/th[text()="Eyes color"]//following-sibling::td/text()
      Measurements:
        selector: //section[@id="about"]//tr/th[text()="Bust"]//following-sibling::td/text()|//section[@id="about"]//tr/th[text()="Waist"]//following-sibling::td/text()|//section[@id="about"]//tr/th[text()="Hips"]//following-sibling::td/text()
        concat: "-"
        postProcess:
          - javascript: |
              // convert from metric to imperial
              if (value && value.length) {
                const cmPerInch = 2.54
                let measurements = value.split('-')
                // fix waist and hips swapped (this is a rare occurrence)
                if (measurements[1] > measurements[2]) {
                  measurements = [measurements[0], measurements[2], measurements[1]]
                }
                return measurements.map(m => Math.round(m / cmPerInch)).join('-')
              }
              return value
      Image: //div[@class="feature_img_model"]/img/@src
# sites now have age-checking and geoblocking, so we can use CDP (with VPN/proxy) to bypass it
driver:
  useCDP: false
# Last Updated August 5, 2025
