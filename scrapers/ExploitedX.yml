name: ExploitedX

sceneByURL:
  - action: scrapeXPath
    url:
      - backroomcastingcouch.com/trailers/
    scraper: sceneScraper
  - action: scrapeXPath
    url:
      - bbcsurprise.com/trailers/ # Protected image
      - hotmilfsfuck.com/trailers/
      - excogigirls.com/trailers/
      - exploitedcollegegirls.com/trailers/ # protected image
    scraper: newSiteScraper

xPathScrapers:
  sceneScraper:
    scene:
      Title: //div[@class="video-player"]//*[@class="section-title"]
      Date: &date
        selector: //strong[text()="Released:"]/following-sibling::text()
        postProcess:
          - parseDate: January 2, 2006
      Details: &details
        selector: //p[contains(@class, "descriptionFull")]
        concat: "\n\n"
        postProcess:
          - replace:
              - regex: (.*?)\s*Read Less
                with: $1
      Studio: &studio
        Name:
          selector: //base/@href
          postProcess:
            - map:
                https://www.backroomcastingcouch.com/: Backroom Casting Couch
                https://bbcsurprise.com/: BBC Surprise
                https://blackambush.com/: Black Ambush
                https://excogigirls.com/: ExCoGi Girls
                https://exploitedcollegegirls.com/: Exploited College Girls
                https://hotmilfsfuck.com/: Hot Milfs Fuck
      Performers:
        Name: //h2[contains(@class, "model-name")]
      Tags:
        Name: //ul[@class="tags"]//a
      Image: &image
        selector: >-
          //base/@href |
          //div[@class="update_image"]/a/img[@src0_1x]/@src0_1x |
          //div[@class="update_image"]/a/img[@src0_2x]/@src0_2x |
          //div[@class="update_image"]/a/img[@src0_3x]/@src0_3x |
          //div[@class="update_image"]/a/img[@src0_4x]/@src0_4x |
          //div[@class="player-thumb"]//img[contains(@class, "update_thumb")]/@src0_1x
        concat: __SEP__
        postProcess:
          - replace:
              - regex: ^(https://.+)?https://
                with: https://
              # This strips out all of the middle results, leaving us with just the site name and the highest resolution image
              - regex: __SEP__.+__SEP__
                with: ""
              # Regardless if multiple images were found we need to replace the separator with a slash to resolve the URL
              - regex: __SEP__
                with: ""
              # Some sites have multiple tour pages, but the images still resolved from the root: remove 'tour1' etc.
              - regex: (:?new)?tour\d?///?
                with: ""
              # If images have been resized we can get the full image instead, suffering no loss of quality (and maybe getting higher qualities!)
              - regex: (:?-[1-4]x)?\.jpg
                with: "-full.jpg"
              # Bypass the CDN (which is protected by a token) and grab it direct from the site
              - regex: (.+)(cdn\.)([^?]+).+
                with: $1$3

  newSiteScraper:
    scene:
      Title: //h1
      Date: *date
      Image: *image
      Tags:
        # Some sites include male performers in the tags, we exclude those and scrape them separately
        Name: //ul[@class="tags"]//a[not(contains(., "Male -"))]
      Studio: *studio
      Details: *details
      Performers:
        Name:
          # Some sites credit the male performer in the tags
          selector: >-
            //section[@id="model-bio" or @id="model bio"]//a/@href |
            //ul[@class="tags"]//a[contains(., "Male -")]
          postProcess:
            - replace:
                # This will only occur for male performers scraped from the tags
                - regex: Male\s+-\s+
                  with: ""
                # The rest of this will extract full performer names from URLs where available:
                # models/model69-Performer -> Performer
                # models/MissPerformer.html -> Miss Performer
                # models/Lady-Performer-Performerson.html -> Lady Performer Performerson
                # models/Fast-2-Fast-Furious.html -> Fast Furious
                - regex: model-?\d+-|\d
                  with: ""
                - regex: .+\/([-\w]+)\.html
                  with: $1
                - regex: ([a-z])([-A-Z])
                  with: $1 $2
                - regex: \s+-+
                  with: " "
        URLs: //section[@id="model-bio" or @id="model bio"]//a/@href
# Last Updated September 17, 2025
