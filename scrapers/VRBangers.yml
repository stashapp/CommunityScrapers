# yaml-language-server: $schema=../validator/scraper.schema.json

name: "VRBangers"

sceneByURL:
  - action: scrapeXPath
    url: &urls
      - arporn.com
      - blowvr.com
      - vrbangers.com
      - vrbgay.com
      - vrbtrans.com
      - vrconk.com
    scraper: vrbScraper
galleryByURL:
  - action: scrapeXPath
    url: *urls
    scraper: vrbScraper
movieByURL:
  - action: scrapeXPath
    url:
      - vrbangers.com
    scraper: vrbScraper
performerByURL:
  - action: scrapeXPath
    url: *urls
    scraper: vrbScraper
sceneByFragment:
  action: scrapeXPath
  # url format: https://{studio}.com/video/{title}
  queryURL: "{filename}"
  queryURLReplace:
    # filename format:
    #   {studio}_{title}_{res}_{vrtype}.{ext}
    #     res: oculus|\d+k
    #     vrtype: stuff we do not care about but could contain '_'
    filename:
      - regex: (?i)^(vrbangers|vrbgay|vrbtrans|vrconk)_(.+)_(?:oculus|\dk)_.+$
        with: https://$1.com/video/$2
      # Titles have spaces replaced with '_' and the url expects '-' instead of spaces
      - regex: _
        with: "-"
  scraper: vrbScraper

xPathScrapers:
  vrbScraper:
    common:
      $info: //div[starts-with(@class,"video-item__info ")]|//div[@class="single-video-info"]
      $modelInfoItem: //div[contains(@class, "single-model-profile__info-wrapper")]//div[@class="single-model-profile__info-item"]|//div[contains(@class, "single-model-profile")]//li[@class="model-info-item"]
      $modelLinks: //div[contains(@class, "single-model-profile__actions")]
    scene:
      Title: &titleAttr
        selector: &titleSel //h1
        postProcess:
          - replace:
              - regex: (Gay|Trans) VR Porn Video$
                with: ""
      Date: &dateAttr
        selector: $info//span[text()="Release date:"]/following-sibling::span/text()|$info//span[text()="Release date:"]/following-sibling::text()
        postProcess:
          - parseDate: Jan 2, 2006
      Details: &detailsAttr
        selector: //div[contains(@class,"second-text")]/div//text()|//div[contains(@class,"single-video-description")]/div//p
        concat: "\n\n"
      Tags: &tagsAttr
        Name: //div[@data-testid="video-categories-list"]/a[contains(@href,"category/")]/text()|//div[@class="single-video-categories"]//a[contains(@href,"category/")]//text()
      Performers: &performersAttr
        Name: //div[starts-with(@class, 'video-item__info-starring')]//a/text()|//div[contains(@class, "single-video-info__starring")]//a//text()
      Studio: &studioAttr
        Name: &studioName
          selector: &studioURLSel //meta[@name="dl8-customization-brand-url"]/@content
          postProcess:
            - replace:
                - regex: ^//
                  with: ""
            - map:
                arporn.com: AR Porn
                blowvr.com: Blow VR
                vrbangers.com: VR Bangers
                vrbgay.com: VRB Gay
                vrbtrans.com: VRB Trans
                vrconk.com: VR Conk
        URL: &studioURL
          selector: *studioURLSel
          postProcess:
            - replace:
                - regex: ^
                  with: "https:"
      Image: &imageSel //div[contains(@class, "single-video-poster__preview")]/img/@src|//meta[@property="og:image"]/@content
      URL: //link[@rel="canonical"]/@href
    gallery:
      Title: *titleAttr
      Date: *dateAttr
      Details: *detailsAttr
      Tags: *tagsAttr
      Performers: *performersAttr
      Studio: *studioAttr
    movie:
      Name:
        selector: *titleSel
        postProcess:
          - replace:
              - regex: ^
                with: "VRBangers - "
      Duration:
        selector: $info//span[contains(text(),"Duration:")]/following-sibling::text()
        postProcess:
          - replace:
              - regex: \smin
                with: ":00"
      Date: *dateAttr
      Synopsis: *detailsAttr
      Studio:
        Name: *studioName
        URL: *studioURL
      FrontImage: *imageSel
    performer:
      Name:
        selector: *titleSel
        postProcess:
          - replace:
              - regex: " (AR|VR).*$"
                with: ""
      Image: //div[contains(@class, "single-model-profile__image app-image")]/img/@src
      Birthdate:
        selector: $modelInfoItem/span[text()="Birthday:"]/following-sibling::span/text()
        postProcess:
          - parseDate: January 2
      Measurements: $modelInfoItem/span[text()="Measurements:"]/following-sibling::span/text()
      Height: $modelInfoItem/span[text()="Height:"]/following-sibling::span/text()
      Weight: $modelInfoItem/span[text()="Weight:"]/following-sibling::span/text()
      Tattoos: $modelInfoItem/span[text()="Tatoos:"]/following-sibling::span/text()
      Piercings: $modelInfoItem/span[text()="Piercings:"]/following-sibling::span/text()
      Country: $modelInfoItem/span[text()="Country of origin:"]/following-sibling::span/text()
      Ethnicity: $modelInfoItem/span[text()="Ethnicity:"]/following-sibling::span/text()
      EyeColor: $modelInfoItem/span[text()="Eye Color:"]/following-sibling::span/text()
      HairColor: $modelInfoItem/span[text()="Hair Color:"]/following-sibling::span/text()
      Aliases: $modelInfoItem/span[text()="Aka:"]/following-sibling::span/text()
      Twitter: $modelLinks/a[contains(@href, "twitter")]/@href
      Instagram: $modelLinks/a[contains(@href, "instagram")]/@href
      URL: //link[@rel="canonical"]/@href
# you can use (a suitably configured) CDP to make use of a proxy/VPN to bypass region-based age-restriction
# driver:
#   useCDP: true
# Last Updated April 11, 2025
