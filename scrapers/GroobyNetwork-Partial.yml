# yaml-language-server: $schema=../validator/scraper.schema.json
name: GroobyNetwork-Partial
performerByURL:
  - action: scrapeXPath
    url:
      - transvr.com/tour/models
    scraper: performerScraper
  - action: scrapeXPath
    url:
      - transexpov.com/tour/models
    scraper: performerScraperB
  - action: scrapeXPath
    url:
      - asiantgirl.com/tour/models
      - franks-tgirlworld.com/tour/models
      - ladyboy-ladyboy.com/tour/models
      - ladyboy.xxx/tour/models
    scraper: performerScraper2
  - action: scrapeXPath
    url:
      - blacktgirlshardcore.com/tour/models
      - black-tgirls.com/tour/models
      - bobstgirls.com/tour/models
      - femout.xxx/tour/models
      - femoutsex.xxx/tour/models
      - groobygirls.com/tour/models
      - joeystransfeetgirls.com/tour/models
      - kellyquellxxx.com/tour/models
      - realtgirls.com/tour/models
      - tgirlsex.xxx/tour/models
      - tgirls.porn/tour/models
      - tgirls.xxx/tour/models
      - tgirlsfuck.com/tour/models
      - tgirltops.com/tour/models
      - tgirlx.com/tour/models
      - transgasm.com/tour/models
    scraper: performerScraper3
  - action: scrapeXPath
    url:
      - brazilian-transsexuals.com/tour/models
    scraper: performerScraper4
  - action: scrapeXPath
    url:
      - grooby-archives.com/tour/models
    scraper: performerScraper5
  - action: scrapeXPath
    url:
      - tgirlshookup.com/tour/models
    scraper: performerScraper6
  - action: scrapeXPath
    url:
      - transnificent.com/tour/models
    scraper: performerScraper7
sceneByURL:
  - action: scrapeXPath
    url: &urls
      # Gone through list at: grooby.com/about/websites/
      - asiantgirl.com
      - blacktgirlshardcore.com
      - black-tgirls.com
      - bobstgirls.com
      - brazilian-transsexuals.com
      - femout.xxx
      - femoutsex.xxx #Scenes on 'femout.xxx' can some times be found on this one as well
      - franks-tgirlworld.com
      - grooby-archives.com
      - groobygirls.com
      - joeystransfeetgirls.com
      - kellyquellxxx.com
      - ladyboy-ladyboy.com
      - ladyboy.xxx
      - realtgirls.com
      - tgirlsex.xxx
      - tgirls.porn
      - tgirls.xxx
      - tgirlsfuck.com
      - tgirlshookup.com
      - tgirltops.com
      - tgirlx.com
      - transexpov.com
      - transgasm.com
      - transnificent.com
    scraper: sceneScraper
  - action: scrapeXPath
    url:
      - transvr.com
    scraper: sceneScraperTransVR
galleryByURL:
  - action: scrapeXPath
    url: *urls
    scraper: galleryScraper
xPathScrapers:
  performerScraper:
    performer:
      Name: &name //h3[@class="modelname"]/text()|//div[@class="model_profile_name"]/text()
      Gender: &gender
        fixed: transgender_female
      Image: &image
        selector: //link[@rel="canonical"]/@href|//div[@class="model_photo"]/img/@src|//div[@class="model_thumbnail"]/img/@src
        concat: "__SEPARATOR__"
        postProcess:
          - replace:
              - regex: ^(https://[^/]*)/.*__SEPARATOR__(.*)$
                with: $1$2
              - regex: 2x
                with: 3x
      Country: &country //li/b[text()="Nationality:"]/following-sibling::text()|//li/b[text()="Location:"]/following-sibling::text()
      Ethnicity: &ethnicity //li/b[text()="Ethnicity:"]/following-sibling::text()
      Birthdate: &birthdate
        selector: &birthdateSel //li//b[text()="Birthday:"]/following-sibling::text()
        postProcess:
          - replace:
              - regex: (\d)(st|[nr]d|th)
                with: "$1"
          - parseDate: 2 January
          - parseDate: 2 Jan
          - parseDate: January 2
          - parseDate: Jan 2
  performerScraperB:
    performer:
      Name: *name
      Gender: *gender
      Image: &image3x
        selector: //link[@rel="canonical"]/@href|//div[@class="model_photo"]/img/@src0_3x|//div[@class="model_thumbnail"]/img/@src0_3x
        concat: "__SEPARATOR__"
        postProcess:
          - replace:
              - regex: ^(https://[^/]*)/.*__SEPARATOR__(.*)$
                with: $1$2
              - regex: content//
                with: content/
      Country: *country
      Ethnicity: *ethnicity
      Birthdate: *birthdate
  performerScraper2:
    performer:
      Name: *name
      Gender: *gender
      Image: *image3x
      Country:
        selector: //li/b[text()="Location:"]/following-sibling::text()
        postProcess:
          - replace:
              - regex: "^.*,\ "
                with: ""
      Birthdate: *birthdate
      Height:
        selector: //div[@class="readmore"]/p
        postProcess:
          - replace:
              - regex: ^.*Height:\ (\d+).*$
                with: $1
  performerScraper3:
    performer:
      Name: *name
      Gender: *gender
      Image: *image3x
      Birthdate: *birthdate
  performerScraper4:
    performer:
      Name: *name
      Gender: *gender
      Image: *image3x
      Birthdate: *birthdateSel
  performerScraper5:
    performer:
      Name: *name
      Gender: *gender
      Image:
        selector: //link[@rel="canonical"]/@href|//div[@class="model_photo"]/img/@src0
        concat: "__SEPARATOR__"
        postProcess:
          - replace:
              - regex: ^(https://[^/]*)/.*__SEPARATOR__(.*)$
                with: $1$2
              - regex: 2x
                with: 3x
      Birthdate: *birthdate
  performerScraper6:
    performer:
      Name: *name
      Gender: *gender
      Image: *image3x
      Birthdate:
        selector: *birthdateSel
        postProcess:
          - replace:
              - regex: (\d)(st|[nr]d|th)
                with: "$1"
              - regex: ([A-Za-z]+)\ (\d+)
                with: "$2 $1"
          - parseDate: 2 January
  performerScraper7:
    performer:
      Name: *name
      Gender:
        fixed: transgender_male
      Image: *image3x
      Birthdate: *birthdate
  sceneScraper:
    scene:
      Title: &title //p[@class="trailertitle"]/text()|//div[@class="trailer_toptitle_left"]/text()[last()]
      Date: &date
        selector: //div[@class="setdesc"]//b[contains(.,"Added")]/following-sibling::text()[1]
        postProcess:
          - parseDate: January 2, 2006
      Details: &details
        # Grooby Network sites use a p tag for the scene description, where each subsequent
        # paragraph is a nested span tag, so they need to be captured separately.
        # There doesn't appear to be a way to capture the text of all child elements
        # (e.g. <a> <em> <strong>) to get the full text of each paragraph, while also
        # ignoring the nested span tags.
        # So instead, the entire text of the p tag is captured, and then the newlines are
        # recreated in the post-processing step.
        selector: //div[@class="trailerpage_info"]/p[not(@class)]
        postProcess:
          - javascript: |
              if (value && value.length > 0) {
                const result = [];
                for (let i = 0; i < value.length; i++) {
                  const character = value[i];
                  if (
                    character === '.'
                    && i !== value.length - 1 // not the last character
                    && !value.slice(i + 1).startsWith('XXX') // not a .XXX domain
                    && !value.slice(i + 1).startsWith('com') // not a .com domain
                    && !value.slice(i + 1).startsWith(' ') // not the end of a sentence
                    && !value.slice(i + 1).startsWith('.') // not consecutive dots
                  ) {
                    result.push(character, '\n\n');
                  } else {
                    result.push(character);
                  }
                }
                return result.join('').trim();
              }
              return value;
      Performers: &performers
        Name: //div[@class="setdesc"]//a/text()
      Studio: &studio
        Name: //meta[@name="author"]/@content
        URL:
          selector: //link[@rel="canonical"]/@href
          postProcess:
            - replace:
                - regex: (https://[^/]*)/.*
                  with: $1
      Image:
        selector: >-
          //link[@rel="canonical"]/@href
          |
          //div[@class="player-thumb"]/img[contains(@class, "thumbs stdimage")]/@src
          |
          //div[@class="player-thumb"]/img[contains(@class, "thumbs stdimage")]/@src0_1x
          |
          //div[@class="trailerposter"]/img/@src0
          |
          //div[@id="fakeplayer"]//img/@src
        concat: __SEPARATOR__
        postProcess:
          - replace:
              - regex: ^.*__SEPARATOR__// # img urls without protocol, but with domain, e.g. //bobstgirls.com/whatever
                with: "https://"
              - regex: ^(https://[^/]*)/.*(__SEPARATOR__.*)$ # remove any path part from canonical URL
                with: $1$2
              - regex: content//  # remove errant double slash in image URL
                with: content/
              - regex: __SEPARATOR__ # remove the separator we added to process the canonical link and relative image URL together
                with: ''
      Tags:
        Name:
          selector: &tagsSel //div[@class="set_tags"]/ul/li//a/text()
  galleryScraper:
    gallery:
      Title: *title
      Date: *date
      Details: *details
      Performers: *performers
      Studio: *studio
      Tags:
        Name: *tagsSel
  sceneScraperTransVR:
    scene:
      Title: //dl8-video/@title
      Date:
        selector: //div[@class="set_meta"]//b[contains(.,"Added")]/following-sibling::text()[1]
        postProcess:
          - parseDate: January 2, 2006
      Details:
        selector: //div[contains(@class,"trailerpage_description")]//*/text()
        concat: "\n\n"
      Performers:
        Name: //div[@class="trailer_toptitle_left"]//a/text()
      Studio: *studio
      Image:
        selector: //dl8-video/@poster
        postProcess:
          - replace:
              - regex: content// # errant double slash
                with: content/
              - regex: ^/
                with: https://www.transvr.com/
      Tags:
        Name:
          selector: >-
            //div[@class="set_tags"]/ul/li/text()
            |
            //div[@class="set_tags"]/ul/li//a/text()
          postProcess:
            - map:
                Tags for This Scene: Virtual Reality

# Use CDP with a configured proxy to bypass region-based age-verification
driver:
  useCDP: false
# Last Updated August 13, 2025
