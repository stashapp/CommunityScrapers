name: Corbin Fisher
sceneByURL:
  - action: scrapeXPath
    url:
      - corbinfisher.com/sfw/trailers
    scraper: sceneScraper

performerByURL:
  - action: scrapeXPath
    url:
      - corbinfisher.com/sfw/models
    scraper: performerScraper

xPathScrapers:
  sceneScraper:
    scene:
      Title:
        selector: //h1
      Date:
        selector: //div[@class="added"]
        postProcess:
          - replace:
              - regex: (^\S+\s+)(.+\d{4})(.+)
                with: $2
          - parseDate: January 2, 2006
      Performers:
        Name: //div[@class="modelFeaturing"]//a
        URLs: //div[@class="modelFeaturing"]//a/@href
      Details:
        selector: //div[@class="description"]/p//text() | //div[@class="description"]/p//br
        concat: "\n\n"
        postProcess:
          - replace:
              - regex: <br\s*\/?> 
                with: "\n"
      # Intentionally disabled
      # https://github.com/stashapp/CommunityScrapers/pull/2496
      # https://discourse.stashapp.cc/t/sfw-vs-nsfw-covers/3712
      # Image:
      #   selector: //img[@height="815"]/@src0_1x
      Studio:
        Name:
          fixed: Corbin Fisher
      Tags:
        Name:
          selector: //head/link[@rel="canonical"]/@href
          postProcess:
            - replace:
              - regex: .*-(remastered|REMASTERED)\..*
                with: "Remaster,Re-Release"
            - replace:
              - regex: ^http.*
                with: ""
          split: ","

  performerScraper:
    performer:
      Name: //div[@class="modelBioDetails"]//h2/text()
      Gender:
        fixed: Male
      HairColor: //span[contains(text(),"HAIR COLOR:")]/following-sibling::text()
      EyeColor: //span[contains(text(),"EYES:")]/following-sibling::text()
      Weight:
        selector: //span[contains(text(),"WEIGHT:")]/following-sibling::text()
        postProcess:
          - lbToKg: true
      Height:
        selector: //span[contains(text(),"HEIGHT:")]/following-sibling::text()
        postProcess:
          - feetToCm: true
      PenisLength:
        selector: //span[contains(text(),"COCK SIZE:")]/following-sibling::text()
        postProcess:
          - replace:
              - regex: ^
                with: "0'"
          - feetToCm: true
      Measurements: //span[contains(text(),"COCK THICKNESS:")]/following-sibling::text()
      Circumcised:  
        selector: //span[contains(text(),"CUT:")]/following-sibling::text() | //span[contains(text(),"AGE:")]/following-sibling::text()
        postProcess:
          - javascript: |
              if (!value || value.match(/^\d+$/)) {  // Se è vuoto o contiene solo numeri (è l'età)
                return "UNCUT"
              }
              return value.toUpperCase().includes("YES") ? "CUT" : "UNCUT"
      Details:  
        selector: //div[@class="modelContent"]/node()
        concat: "\n"
        postProcess:
          - replace:
              - regex: <br\s*\/?> 
                with: "\n"
      Disambiguation:
        fixed: Corbin Fisher
      FakeTits:
        fixed: Natural
      Image: //div[@class="modelBioPic"]/img/@src0_1x
      Tags:
        Name:
          selector: |
            //span[contains(text(),"BODY BUILD:")]/text()|
            //span[contains(text(),"BODY BUILD:")]/following-sibling::text()|
            //span[contains(text(),"EYES:")]/text()|
            //span[contains(text(),"EYES:")]/following-sibling::text()|
            //span[contains(text(),"HAIR COLOR:")]/text()|
            //span[contains(text(),"HAIR COLOR:")]/following-sibling::text()|
            //span[contains(text(),"CUT:")]/text() | //span[contains(text(),"AGE:")][not(//span[contains(text(),"CUT:")])]/text()|
            //span[contains(text(),"CUT:")]/following-sibling::text() | //span[contains(text(),"AGE:")][not(//span[contains(text(),"CUT:")])]/following-sibling::text()|
            //span[contains(text(),"COCK THICKNESS:")]/text()|
            //span[contains(text(),"COCK THICKNESS:")]/following-sibling::text()
          concat: ","
          postProcess:
            - javascript: |
                let pairs = [];
                const values = value.split(",").map(v => v.trim()).filter(v => v);
                
                // Aggiungiamo subito il tag Corbin Fisher
                pairs.push("Corbin Fisher");
                
                for(let i = 0; i < values.length; i += 2) {
                  const label = values[i];
                  const val = values[i+1];
                  if(!val) continue;
                  
                  const firstPart = val.toLowerCase().charAt(0).toUpperCase() + val.toLowerCase().slice(1);
                  
                  if(label.includes("AGE:")) {
                    pairs.push("Uncircumcised");
                    continue;
                  }
                  
                  if(label.includes("EYES:")) {
                    pairs.push(firstPart + " Eyes");
                  }
                  else if(label.includes("HAIR COLOR:")) {
                    pairs.push(firstPart + " Hair");
                  }
                  else if(label.includes("CUT:")) {
                    pairs.push(val.toUpperCase().includes("YES") ? "Circumcised" : "Uncircumcised");
                  }
                  else if(label.includes("BODY BUILD:")) {
                    const bodyTypes = {
                      "ATHLETIC": "Athletic",
                      "SLIM": "Slim",
                      "AVERAGE": "Average",
                      "MUSCULAR": "Muscular",
                      "TONED": "Athletic"
                    };
                    pairs.push(bodyTypes[val.trim().toUpperCase()] || firstPart);
                  }
                  else if(label.includes("COCK THICKNESS:")) {
                    pairs.push(firstPart + " Dick");
                  }
                }
                return pairs.join(",");
          split: ","

driver:
  useCDP: true
# Last Updated September 25, 2025
